.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_secure_channel_itf:

===================
CmpSecureChannelItf
===================

Interface of CmpSecureChannel. :ref:`More... <group___cmp_secure_channel_itf-details>`

Modules
-------

- :ref:`SecuritySettings <group___cmp_secure_channel_itf___security_settings>`

Data Structures
---------------

- struct :ref:`HEADER_TAG_CRYPT <struct_h_e_a_d_e_r___t_a_g___c_r_y_p_t>`

- struct :ref:`ICmpSecureChannel_C <struct_i_cmp_secure_channel___c>`

Macros
------

- #define :ref:`ITF_CmpSecureChannel <group___cmp_secure_channel_itf_1gaaf1472c5458ea346aa372b5d022fda89>`

- #define :ref:`EXTITF_CmpSecureChannel <group___cmp_secure_channel_itf_1ga0718678cfc04566be33b1f155f67c1cf>`

Typedefs
--------

- typedef :ref:`ICmpSecureChannel_C <struct_i_cmp_secure_channel___c>` :ref:`ICmpSecureChannel <group___cmp_secure_channel_itf_1ga255c03d8629e2589510c0d11e9888a62>`

Enumerations
------------

- enum :ref:`OnlineCommMode <group___cmp_secure_channel_itf_1gad1c84e9f6b38751adc581f21286fc071>` { :ref:`OnlineCommMode_ONLY_PLAIN <group___cmp_secure_channel_itf_1ggad1c84e9f6b38751adc581f21286fc071ad9cceee37591a78051d57e9b18f0ae13>`, :ref:`OnlineCommMode_PLAIN_AND_ENCRYPTED <group___cmp_secure_channel_itf_1ggad1c84e9f6b38751adc581f21286fc071abda0c2d3bd25a01ce3c269de4dd7b7f5>`, :ref:`OnlineCommMode_ONLY_ENCRYPTED <group___cmp_secure_channel_itf_1ggad1c84e9f6b38751adc581f21286fc071a5d6e4f01d0bb4838ea5f74730d1e75f6>` }

Functions
---------

- RTS_RESULT :ref:`SecChServerHandleRequest <group___cmp_secure_channel_itf_1gacc6a4c3249ece275b0e837cd3741df94>` (RTS_UI32 ui32ChannelHandle, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduRequest, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduReply, RTS_UI32 bFirstCall)

- RTS_RESULT :ref:`SecChServerGetMaxChannels <group___cmp_secure_channel_itf_1ga4f73cb59c662acbc2bb9f6f1daaf5198>` (RTS_UI16 * pui16MaxChannels)

- RTS_RESULT :ref:`SecChServerGetChannelInfoByIndex <group___cmp_secure_channel_itf_1ga026e6d35ebdaf9ca99ad81451c56e63e>` (RTS_UI16 ui16ChannelIndex, RTS_UI32 * pui32ServerState, :ref:`CHANNELINFO <struct_c_h_a_n_n_e_l_i_n_f_o>` * pChInfoBuffer, RTS_SIZE * psiBufferLen)

- RTS_RESULT :ref:`SecChServerGetStatus <group___cmp_secure_channel_itf_1gaf0512229996f9f7b5e9465874cf500a0>` (RTS_UI32 ui32ChannelHandle, RTS_UI16 * pui16Status, RTS_UI8 * pui8ScalingFactor, RTS_I32 * pi32ItemsComplete, RTS_I32 * pi32TotalItems)

- RTS_RESULT :ref:`SecChServerGetRequest <group___cmp_secure_channel_itf_1gac78975548292af0cb4bde4d78da30621>` (RTS_UI32 ui32ChannelHandle, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>` * ppduRequest, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>` * ppduReplyBuffer)

- RTS_RESULT :ref:`SecChServerFinishRequest <group___cmp_secure_channel_itf_1gaacbdb96d7398a0fc54dd546d3283f4ec>` (RTS_UI32 ui32ChannelHandle, :ref:`PROTOCOL_DATA_UNIT <struct_p_r_o_t_o_c_o_l___d_a_t_a___u_n_i_t>`  pduData)

- RTS_RESULT :ref:`SecChServerSetSessionId <group___cmp_secure_channel_itf_1ga1add158784bd5ef28c9f5d6dd7f36cc5>` (RTS_UI32 ui32ChannelHandle, RTS_UI32 ui32SessionId)

- RTS_RESULT :ref:`SecChServerGetSessionId <group___cmp_secure_channel_itf_1gaedee8173939c502904d735d018133c9b>` (RTS_UI32 ui32ChannelHandle, RTS_UI32 * pui32SessionId)

.. _group___cmp_secure_channel_itf-details:

Detailed Description
--------------------

Interface of CmpSecureChannel.

Interface for a secure channel implementation to provide a secure (TLS based) channel on top of a communication channel. In the communication stack of the CODESYS runtime system the implementation of this interface can be optionally called between CmpChannelServer and CmpSrv.

SECURITY-NOTE: The security manager must be linked statically to the runtime system core to prevent, that it cannot be removed or replaced by a malware!

**Copyright:**

\(c) 2003-2016 3S-Smart Software Solutions

Macro Definition Documentation
------------------------------
.. _group___cmp_secure_channel_itf_1gaaf1472c5458ea346aa372b5d022fda89:

#define ITF_CmpSecureChannel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_secure_channel_itf_1ga0718678cfc04566be33b1f155f67c1cf:

#define EXTITF_CmpSecureChannel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_secure_channel_itf_1ga255c03d8629e2589510c0d11e9888a62:

typedef ICmpSecureChannel_C ICmpSecureChannel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enumeration Type Documentation
------------------------------

.. _group___cmp_secure_channel_itf_1gad1c84e9f6b38751adc581f21286fc071:

enum OnlineCommMode
^^^^^^^^^^^^^^^^^^^

Security level for the programming system communication 

**Enumerator:**

+------------------------------------+
| OnlineCommMode_ONLY_PLAIN          |
+------------------------------------+
| OnlineCommMode_PLAIN_AND_ENCRYPTED |
+------------------------------------+
| OnlineCommMode_ONLY_ENCRYPTED      |
+------------------------------------+

Function Documentation
----------------------

.. _group___cmp_secure_channel_itf_1gacc6a4c3249ece275b0e837cd3741df94:

RTS_RESULT SecChServerHandleRequest (RTS_UI32 ui32ChannelHandle, PROTOCOL_DATA_UNIT pduRequest, PROTOCOL_DATA_UNIT pduReply, RTS_UI32 bFirstCall)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Handle one sevice request from the communication layer below (channel server)

**Parameters**

+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel on which the request arrived                                              |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | pduRequest        | Pointer to the request                                                                      |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [out]   | pduReply          | Pointer to the request reply buffer                                                         |
+---------+-------------------+---------------------------------------------------------------------------------------------+
| [in]    | bFirstCall        | 0: Tells the function, if it was already called for the same request before (0) or not (1). |
+---------+-------------------+---------------------------------------------------------------------------------------------+

**Return values**

+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_OK         | Received service was completely handeled.                                                                                                                |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_PENDING    | Received service will be handled asynchronously, but the caller has not to take care about this anymore.                                                 |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_CALL_AGAIN | Received service will be handled asynchronously. To progress this function have to be called again for the same received service data with bFirstCall=0. |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ERR_...        | Another error occured, channel should be closed.                                                                                                         |
+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1ga4f73cb59c662acbc2bb9f6f1daaf5198:

RTS_RESULT SecChServerGetMaxChannels (RTS_UI16 *pui16MaxChannels)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the number of available server channels. This is equal to the max. number of clients, which can be connected at the same time.

**Parameters**

+---------+------------------+------------------------+
| [out]   | pui16MaxChannels | Number of of channels. |
+---------+------------------+------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1ga026e6d35ebdaf9ca99ad81451c56e63e:

RTS_RESULT SecChServerGetChannelInfoByIndex (RTS_UI16 ui16ChannelIndex, RTS_UI32 *pui32ServerState, CHANNELINFO *pChInfoBuffer, RTS_SIZE *psiBufferLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves general information for the specified server channel. This function is intended for information purpoeses only.

**Parameters**

+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui16ChannelIndex | Index of the channel. Allowed range: 0..MaxChannels-1.                                                                                                                   |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pui32ServerState | State of the server channel, see category "channel server state" for CSSTATE_ values in CmpCommunicationLibItf.                                                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | pChInfoBuffer    | Caller allocated buffer, which is filled by the :ref:`CHANNELINFO <struct_c_h_a_n_n_e_l_i_n_f_o>` structure. If the the state is CSSTATE_FREE, no structure is returned. |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [inout] | psiBufferLen     | Pointer to the size of the buffer in bytes, returns the number of copied bytes.                                                                                          |
+---------+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1gaf0512229996f9f7b5e9465874cf500a0:

RTS_RESULT SecChServerGetStatus (RTS_UI32 ui32ChannelHandle, RTS_UI16 *pui16Status, RTS_UI8 *pui8ScalingFactor, RTS_I32 *pi32ItemsComplete, RTS_I32 *pi32TotalItems)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the current status of an active channel.

**Parameters**

+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel                                                                                                                                                                                        |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pui16Status       | Is set to the current progress state. The PROGRESS_xxx constants define valied values.                                                                                                                   |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pui8ScalingFactor | Provides the scaling factor for pnItemsComplete and pnTotalItems. These values have been scaled down by dividing them through 2^ScalingFactor (i.e. they have been right shifted by ScalingFactor bits). |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pi32ItemsComplete | Number of items completed (eg. the number of bytes transfered).                                                                                                                                          |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pi32TotalItems    | Total number of item. Is set to -1 if unknown.                                                                                                                                                           |
+---------+-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1gac78975548292af0cb4bde4d78da30621:

RTS_RESULT SecChServerGetRequest (RTS_UI32 ui32ChannelHandle, PROTOCOL_DATA_UNIT *ppduRequest, PROTOCOL_DATA_UNIT *ppduReplyBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the current request and reply buffer.

**Parameters**

+---------+-------------------+------------------------------------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel for which the session id should be read.                         |
+---------+-------------------+------------------------------------------------------------------------------------+
| [inout] | ppduRequest       | Caller allocated PDU to be filled with pointer and length of the received request. |
+---------+-------------------+------------------------------------------------------------------------------------+
| [inout] | ppduReplyBuffer   | Caller allocated PDU to be filled with pointer and length of the reply.            |
+---------+-------------------+------------------------------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1gaacbdb96d7398a0fc54dd546d3283f4ec:

RTS_RESULT SecChServerFinishRequest (RTS_UI32 ui32ChannelHandle, PROTOCOL_DATA_UNIT pduData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Commits the filled reply buffer to the channel and triggers sending the reply.

**Parameters**

+---------+-------------------+------------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel for which the session id should be read. |
+---------+-------------------+------------------------------------------------------------+
| [in]    | pduData           | Pointer to the reply buffer                                |
+---------+-------------------+------------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1ga1add158784bd5ef28c9f5d6dd7f36cc5:

RTS_RESULT SecChServerSetSessionId (RTS_UI32 ui32ChannelHandle, RTS_UI32 ui32SessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Stores the session id in the channel server status structure.

**Parameters**

+---------+-------------------+-----------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel for which the session id should be set. |
+---------+-------------------+-----------------------------------------------------------+
| [in]    | ui32SessionId     | New session id fo the channel.                            |
+---------+-------------------+-----------------------------------------------------------+

**Returns:**

error code

.. _group___cmp_secure_channel_itf_1gaedee8173939c502904d735d018133c9b:

RTS_RESULT SecChServerGetSessionId (RTS_UI32 ui32ChannelHandle, RTS_UI32 *pui32SessionId)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Retrieves the stored session id from the channel server status structure.

**Parameters**

+---------+-------------------+------------------------------------------------------------+
| [in]    | ui32ChannelHandle | Id of the channel for which the session id should be read. |
+---------+-------------------+------------------------------------------------------------+
| [out]   | pui32SessionId    | Pointer to return the session id.                          |
+---------+-------------------+------------------------------------------------------------+

**Returns:**

error code

.. last line of group.rst template
.. last line of composition.rst template


