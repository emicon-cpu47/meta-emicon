.. first line of composition.rst template

.. first line of group.rst template

.. _group___cmp_user_d_b_itf:

============
CmpUserDBItf
============

Interface of CmpUserDB. :ref:`More... <group___cmp_user_d_b_itf-details>`

Modules
-------

- :ref:`Group rights entry <group___cmp_user_d_b_itf___grouprightsentry>`

- :ref:`Object entry <group___cmp_user_d_b_itf___objectentry>`

- :ref:`Predefined user groups <group___cmp_user_d_b_itf___predefinedusergroups>`

- :ref:`Predefined users <group___cmp_user_d_b_itf___predefinedusers>`

- :ref:`Static defines <group___cmp_user_d_b_itf___staticdefines>`

- :ref:`Union to store the cleartext password or a password hash optional <group___cmp_user_d_b_itf___uniontostorethecleartextpasswordorapasswordhashoptional>`

- :ref:`User database entry <group___cmp_user_d_b_itf___userdatabaseentry>`

- :ref:`User group database entry <group___cmp_user_d_b_itf___usergroupdatabaseentry>`

- :ref:`User rights <group___cmp_user_d_b_itf___userrights>`

- :ref:`UserDB properties <group___cmp_user_d_b_itf___user_d_bproperties>`

Data Structures
---------------

- struct :ref:`ICmpUserDB_C <struct_i_cmp_user_d_b___c>`

Macros
------

- #define :ref:`ITF_CmpUserDB <group___cmp_user_d_b_itf_1gabb53395a6a984a913f911edb18b6ec1b>`

- #define :ref:`EXTITF_CmpUserDB <group___cmp_user_d_b_itf_1ga8b7950f1d381f98051d500246a570700>`

Typedefs
--------

- typedef :ref:`ICmpUserDB_C <struct_i_cmp_user_d_b___c>` :ref:`ICmpUserDB <group___cmp_user_d_b_itf_1gacfbe54e170156b44b8a61ff41bfdb230>`

Functions
---------

- RTS_RESULT :ref:`UserDBIsConfigurable <group___cmp_user_d_b_itf_1ga4c9bb0711591572563938429d3765354>` (RTS_UI32 * pulPropertyUsers, RTS_UI32 * pulPropertyGroups)

- RTS_RESULT :ref:`UserDBLoad <group___cmp_user_d_b_itf_1ga42f257e1b934bdc47d2433ed1b332e15>` (void)

- RTS_RESULT :ref:`UserDBStore <group___cmp_user_d_b_itf_1ga18dde7305e7f9854825bfa986904df41>` (void)

- RTS_RESULT :ref:`UserDBRelease <group___cmp_user_d_b_itf_1ga1ee2c04f93ab8aaddb33ecc80c49cdf7>` (void)

- RTS_HANDLE :ref:`UserDBAdd <group___cmp_user_d_b_itf_1gafea5dcd6b7a34019bf034eea04951808>` (char * pszUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBRemove <group___cmp_user_d_b_itf_1gaa8d91d5c6560bf90c6eca398f3d50360>` (RTS_HANDLE hUser)

- RTS_RESULT :ref:`UserDBSetPassword <group___cmp_user_d_b_itf_1ga44ddbe364e7d74d7854acaf7f42ddc72>` (RTS_HANDLE hUser, char * pszPassword)

- RTS_RESULT :ref:`UserDBGetPasswordMD5 <group___cmp_user_d_b_itf_1ga7e88c897cbf2fa1b99d3f251c5815a8c>` (RTS_HANDLE hUser, unsigned char * pbyPasswordMD5, int * piMaxLen)

- RTS_RESULT :ref:`UserDBSetPasswordMD5 <group___cmp_user_d_b_itf_1ga54f0191b2e375c6ad21f826f664c62c0>` (RTS_HANDLE hUser, unsigned char * pbyPasswordMD5, int * piMaxLen)

- RTS_RESULT :ref:`UserDBSetProperty <group___cmp_user_d_b_itf_1ga9bad26c173acb05c79cd7fa80b05b14b>` (RTS_HANDLE hUser, RTS_UI32 ulProperty)

- RTS_HANDLE :ref:`UserDBGetFirst <group___cmp_user_d_b_itf_1gad945d309b83a82294517242a8e7f3557>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGetNext <group___cmp_user_d_b_itf_1gac0d58351305afe299d1c6eea2533ca8b>` (RTS_HANDLE hPrevUser, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBOpen <group___cmp_user_d_b_itf_1gaa78bb481b3f3548dd2ffe5f91becf683>` (char * pszUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBClose <group___cmp_user_d_b_itf_1gae62c1d3f39df8506c441ae6a3106eb40>` (RTS_HANDLE hUser)

- RTS_RESULT :ref:`UserDBGetName <group___cmp_user_d_b_itf_1ga621695714b63963d6f28a43ee598cfec>` (RTS_HANDLE hUser, char * pszUser, int * piMaxLen)

- RTS_RESULT :ref:`UserDBGetProperty <group___cmp_user_d_b_itf_1ga47236fcee7c6865e762d7f70a54a6ac7>` (RTS_HANDLE hUser, RTS_UI32 * pulProperty)

- RTS_RESULT :ref:`UserDBCheckPassword <group___cmp_user_d_b_itf_1ga97c12727fe2bc03b857aed0749c67ea7>` (RTS_HANDLE hUser, char * pszPassword)

- RTS_HANDLE :ref:`UserDBGetFirstGroup <group___cmp_user_d_b_itf_1gaae875907da955eb486c104c6df2a5a8b>` (RTS_HANDLE hUser, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGetNextGroup <group___cmp_user_d_b_itf_1ga7e9cd0425a047f653badde2dd1500db4>` (RTS_HANDLE hUser, RTS_HANDLE hPrevGroup, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGroupAdd <group___cmp_user_d_b_itf_1ga310c3ae23d02c9ea8d072c2bb27fca34>` (char * pszGroup, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBGroupRemove <group___cmp_user_d_b_itf_1ga53eb2ead2c70472e1aaedb46519fa899>` (RTS_HANDLE hGroup)

- RTS_RESULT :ref:`UserDBGroupAddUser <group___cmp_user_d_b_itf_1ga592f6109f59dd2334bdea684bbed611e>` (RTS_HANDLE hGroup, RTS_HANDLE hUser)

- RTS_RESULT :ref:`UserDBGroupRemoveUser <group___cmp_user_d_b_itf_1gab2fafe4f1859e282428a8bd923f24c81>` (RTS_HANDLE hGroup, RTS_HANDLE hUser)

- RTS_RESULT :ref:`UserDBGroupSetProperty <group___cmp_user_d_b_itf_1ga71b472bc0cd6c9b6b85160aa05860454>` (RTS_HANDLE hGroup, RTS_UI32 ulProperty)

- RTS_RESULT :ref:`UserDBGroupAddMember <group___cmp_user_d_b_itf_1ga20afb4d486b5e13ed81c0ab99dd4a7a0>` (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)

- RTS_RESULT :ref:`UserDBGroupRemoveMember <group___cmp_user_d_b_itf_1gaf5075c4df9d39a576bf3a295f3098fe5>` (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)

- RTS_HANDLE :ref:`UserDBGroupGetFirst <group___cmp_user_d_b_itf_1gadf2c07b5c0a8633f1d19631c674f31c7>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGroupGetNext <group___cmp_user_d_b_itf_1ga330560f782f1357476d13600beec6dfe>` (RTS_HANDLE hPrevGroup, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGroupOpen <group___cmp_user_d_b_itf_1gaadc1b6e4555a5bdbc95a57e90793ce67>` (char * pszGroup, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBGroupClose <group___cmp_user_d_b_itf_1ga2bd36eb02e92b555783cb80dcddc03cd>` (RTS_HANDLE hGroup)

- RTS_RESULT :ref:`UserDBGroupGetName <group___cmp_user_d_b_itf_1gaa369c57d9fbd1bb2e377b4a827559819>` (RTS_HANDLE hGroup, char * pszGroup, int * piMaxLen)

- RTS_RESULT :ref:`UserDBGroupGetProperty <group___cmp_user_d_b_itf_1ga1fbd5d0a7d55623bbd65d073b31e3668>` (RTS_HANDLE hGroup, RTS_UI32 * pulProperty)

- RTS_RESULT :ref:`UserDBGroupHasUser <group___cmp_user_d_b_itf_1gaf35118fab9a262b7b12e3d14e8c7dcea>` (RTS_HANDLE hGroup, RTS_HANDLE hUser)

- RTS_HANDLE :ref:`UserDBGroupGetFirstUser <group___cmp_user_d_b_itf_1ga8a833a1d5bdff8bb593a331a70da690b>` (RTS_HANDLE hGroup, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGroupGetNextUser <group___cmp_user_d_b_itf_1gabea7ead32f191a299f9e9ff9dee71c3f>` (RTS_HANDLE hGroup, RTS_HANDLE hPrevUser, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBGroupHasMember <group___cmp_user_d_b_itf_1ga9f4db2b4c2e026cfb3b40ca067a2b074>` (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)

- RTS_HANDLE :ref:`UserDBGroupGetFirstMember <group___cmp_user_d_b_itf_1ga14c27328dcfd923c2fd0848f3ab7e6d2>` (RTS_HANDLE hGroup, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBGroupGetNextMember <group___cmp_user_d_b_itf_1ga524e5d7e9db408eb950fbc5488f631ea>` (RTS_HANDLE hGroup, RTS_HANDLE hPrevGroupMember, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBRightsLoad <group___cmp_user_d_b_itf_1ga91659e835b42994966300d8a637fc943>` (void)

- RTS_RESULT :ref:`UserDBRightsStore <group___cmp_user_d_b_itf_1gaa13562c7d0c1225e9ba823e286b5fc7b>` (void)

- RTS_RESULT :ref:`UserDBRightsRelease <group___cmp_user_d_b_itf_1ga740be94d09e4909676c67fb93bf5074d>` (void)

- RTS_HANDLE :ref:`UserDBObjectAdd <group___cmp_user_d_b_itf_1ga025ba4f0a6be7ae9f5b6a72c4d95e568>` (char * pszObject, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBObjectRemove <group___cmp_user_d_b_itf_1ga751556c319d0eff1462ffc4c96604e4b>` (RTS_HANDLE hObject)

- RTS_HANDLE :ref:`UserDBObjectAddChild <group___cmp_user_d_b_itf_1gab0373c8bc403ae7ed2c0b41a0d1bbb39>` (RTS_HANDLE hFatherObject, char * pszObject, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBObjectGetID <group___cmp_user_d_b_itf_1ga1dbda78722d85e821ef0060cddec27d0>` (RTS_HANDLE hObject, RTS_UI32 * pulID)

- RTS_RESULT :ref:`UserDBObjectSetID <group___cmp_user_d_b_itf_1gae4ff4b101ef8701b294d929dfa8c8858>` (RTS_HANDLE hObject, RTS_UI32 ulID)

- RTS_RESULT :ref:`UserDBObjectAddGroup <group___cmp_user_d_b_itf_1gaa24efd478320759dfbe0e59c29add239>` (RTS_HANDLE hObject, RTS_HANDLE hGroup)

- RTS_RESULT :ref:`UserDBObjectRemoveGroup <group___cmp_user_d_b_itf_1ga3d0cf387e9da96a8e6e5034cb1ec16d1>` (RTS_HANDLE hObject, RTS_HANDLE hGroup)

- RTS_RESULT :ref:`UserDBObjectSetGroupRights <group___cmp_user_d_b_itf_1ga6a983d1a6cdfef28d9ac51972594bfb9>` (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 ulRights)

- RTS_RESULT :ref:`UserDBObjectSetGroupDeniedRights <group___cmp_user_d_b_itf_1gaecb1dbb879b61ac84fb86f57600bb8a3>` (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 ulDeniedRights)

- RTS_HANDLE :ref:`UserDBObjectGetFirst <group___cmp_user_d_b_itf_1gae39441a005c39247db62d7945e555b73>` (RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectGetNext <group___cmp_user_d_b_itf_1ga065389c35d380fc9138cd73fc4fe2eaf>` (RTS_HANDLE hPrevObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectOpen <group___cmp_user_d_b_itf_1ga0f34c95214c7f0ed119ae205761337f4>` (char * pszObject, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBObjectClose <group___cmp_user_d_b_itf_1ga2d8673c3a52d6aaa18839944c73b0de4>` (RTS_HANDLE hObject)

- RTS_RESULT :ref:`UserDBObjectGetName <group___cmp_user_d_b_itf_1ga3fd83d0d757af18b83c9434cce474e4b>` (RTS_HANDLE hObject, char * pszObject, int * piMaxLen)

- RTS_RESULT :ref:`UserDBObjectGetPath <group___cmp_user_d_b_itf_1gad42743065d3803b1c91de99ad29258e4>` (RTS_HANDLE hObject, char * pszObject, int * piMaxLen)

- RTS_HANDLE :ref:`UserDBObjectGetFirstChild <group___cmp_user_d_b_itf_1gafac4ff5ab210265b7ea71ff375502d3c>` (RTS_HANDLE hFatherObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectGetNextChild <group___cmp_user_d_b_itf_1ga3f6ca2689ac544ecbc6bb1a684ff7ee3>` (RTS_HANDLE hFatherObject, RTS_HANDLE hPrevChildObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectGetFather <group___cmp_user_d_b_itf_1gac253d2a61d4b16f9a1a47c88ac586968>` (RTS_HANDLE hChildObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectGetFirstGroup <group___cmp_user_d_b_itf_1ga27b9d715209def8ddfab274b981e3b9c>` (RTS_HANDLE hObject, RTS_RESULT * pResult)

- RTS_HANDLE :ref:`UserDBObjectGetNextGroup <group___cmp_user_d_b_itf_1ga26e2651eef1f837177d13cbccfdfc0bc>` (RTS_HANDLE hObject, RTS_HANDLE hPrevGroup, RTS_RESULT * pResult)

- RTS_RESULT :ref:`UserDBObjectGetGroupRights <group___cmp_user_d_b_itf_1ga75bfbb56951f552114f2a061f3543bdf>` (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 * pulRights, RTS_UI32 * pulDeniedRights)

- RTS_RESULT :ref:`UserDBObjectHasRights <group___cmp_user_d_b_itf_1ga471e4ecc020e4148efa17830ed104767>` (char * pszObject, RTS_HANDLE hUser, RTS_UI32 ulRequestedRights)

- RTS_RESULT :ref:`UserDBObjectGetRights <group___cmp_user_d_b_itf_1gabd2e62a5fa07a430754f7be16cec3fef>` (char * pszObject, RTS_HANDLE hUser, RTS_UI32 * pulRights, RTS_UI32 * pulDeniedRights)

.. _group___cmp_user_d_b_itf-details:

Detailed Description
--------------------

Interface of CmpUserDB.

Interface for the user management database. Two different kinds of user management items must be stored:

1. Users + Groups: Here you have to store all users with their credentials and their property flags, additionally all user groups with all assigned users and the usergroup property flags.

Example:

- User: Name = "MyUser"; Password = [password in a safe hash]; Property = 0x....

- UserGroup: Name = "Administrator"; UserMembers = "MyUser", "..."; Property = 0x....

2. User Rights: Here you have to store the tree of all objects of the runtime system with their assigned usergroups and the configured rights on it.

Example:

- Object: Name = "Device"; UserGroup = "Administator" | Rights = USERDB_RIGHT_ALL | DeniedRights = USERDB_RIGHT_NONE; UserGroup = "..." | Rights = ... | DeniedRights = ...; ...

- Object: Name = "Device.MyObject"; UserGroup = "Administator" | Rights = USERDB_RIGHT_ALL | DeniedRights = USERDB_RIGHT_NONE; UserGroup = "..." | Rights = ... | DeniedRights = ...; ...

For details see :ref:`CmpUserMgrItf.h <_cmp_user_mgr_itf_8h>` .

**Copyright:**

\(c) 2003-2016 3S-Smart Software Solutions GmbH

Macro Definition Documentation
------------------------------
.. _group___cmp_user_d_b_itf_1gabb53395a6a984a913f911edb18b6ec1b:

#define ITF_CmpUserDB
^^^^^^^^^^^^^^^^^^^^^

.. _group___cmp_user_d_b_itf_1ga8b7950f1d381f98051d500246a570700:

#define EXTITF_CmpUserDB
^^^^^^^^^^^^^^^^^^^^^^^^

Typedef Documentation
---------------------

.. _group___cmp_user_d_b_itf_1gacfbe54e170156b44b8a61ff41bfdb230:

typedef ICmpUserDB_C ICmpUserDB
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function Documentation
----------------------

.. _group___cmp_user_d_b_itf_1ga4c9bb0711591572563938429d3765354:

RTS_RESULT UserDBIsConfigurable (RTS_UI32 *pulPropertyUsers, RTS_UI32 *pulPropertyGroups)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Function to check if users and usergroups database is configurable (not fix compiled)

**Parameters**

+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pulPropertyUsers  | Pointer to get the users property: USERDB_PROP_ALL = Users are configurable, USERDB_PROP_NONE = Users are not configurable         |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pulPropertyGroups | Pointer to get the user groups property: USERDB_PROP_ALL = Groups are configurable, USERDB_PROP_NONE = Groups are not configurable |
+---------+-------------------+------------------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+------------+------------------------+
| ERR_OK     | Succeeded              |
+------------+------------------------+
| ERR_FAILED | Could not be retrieved |
+------------+------------------------+

.. _group___cmp_user_d_b_itf_1ga42f257e1b934bdc47d2433ed1b332e15:

RTS_RESULT UserDBLoad (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Load the user database into memory
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------+
| ERR_OK             | Succeeded                                    |
+--------------------+----------------------------------------------+
| ERR_FAILED         | Error loading user database                  |
+--------------------+----------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDB is fix |
+--------------------+----------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga18dde7305e7f9854825bfa986904df41:

RTS_RESULT UserDBStore (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Storing the current user management into permanent database file
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------+
| ERR_OK             | Succeeded                                    |
+--------------------+----------------------------------------------+
| ERR_FAILED         | Error storing user database                  |
+--------------------+----------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDB is fix |
+--------------------+----------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga1ee2c04f93ab8aaddb33ecc80c49cdf7:

RTS_RESULT UserDBRelease (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Release user management in memory. NOTE: The database file is not removed!
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------+
| ERR_OK             | Succeeded                                    |
+--------------------+----------------------------------------------+
| ERR_FAILED         | Failed releasing user management             |
+--------------------+----------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDB is fix |
+--------------------+----------------------------------------------+

.. _group___cmp_user_d_b_itf_1gafea5dcd6b7a34019bf034eea04951808:

RTS_HANDLE UserDBAdd (char *pszUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new user to the user database

**Parameters**

+---------+---------+-----------------------+
| [in]    | pszUser | User name             |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | User could be added                                            |
+--------------------+----------------------------------------------------------------+
| ERR_DUPLICATE      | User already exists                                            |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. pszUser = NULL or empty                     |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | No memory available to store new user                          |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the added user or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gaa8d91d5c6560bf90c6eca398f3d50360:

RTS_RESULT UserDBRemove (RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove user from the user database

**Parameters**

+---------+-------+--------------------+
| [in]    | hUser | Handle to the user |
+---------+-------+--------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------+
| ERR_OK        | User could be removed |
+---------------+-----------------------+
| ERR_PARAMETER | Invalid user handle   |
+---------------+-----------------------+

.. _group___cmp_user_d_b_itf_1ga44ddbe364e7d74d7854acaf7f42ddc72:

RTS_RESULT UserDBSetPassword (RTS_HANDLE hUser, char *pszPassword)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set or overwrite the password credential of the user

**Parameters**

+---------+-------------+----------------------------------+
| [in]    | hUser       | Handle to the user               |
+---------+-------------+----------------------------------+
| [in]    | pszPassword | Pointer to password in cleartext |
+---------+-------------+----------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------------+
| ERR_OK        | Password could be set                  |
+---------------+----------------------------------------+
| ERR_PARAMETER | Invalid user handle or password = NULL |
+---------------+----------------------------------------+

.. _group___cmp_user_d_b_itf_1ga7e88c897cbf2fa1b99d3f251c5815a8c:

RTS_RESULT UserDBGetPasswordMD5 (RTS_HANDLE hUser, unsigned char *pbyPasswordMD5, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the password credential of the user

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [in]    | hUser          | Handle to the user                                                                                                 |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [in]    | pbyPasswordMD5 | Pointer to MD5 hash of the password                                                                                |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen       | Pointer to password MD5 hash length. If it is too short, needed length is returned if error code is ERR_BUFFERSIZE |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------+-----------------------------------------------------------------------+
| ERR_OK         | Password could be set                                                 |
+----------------+-----------------------------------------------------------------------+
| ERR_PARAMETER  | Invalid user handle or piMaxLen = NULL                                |
+----------------+-----------------------------------------------------------------------+
| ERR_BUFFERSIZE | If password buffer is too short. Needed length is returned inpiMaxLen |
+----------------+-----------------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga54f0191b2e375c6ad21f826f664c62c0:

RTS_RESULT UserDBSetPasswordMD5 (RTS_HANDLE hUser, unsigned char *pbyPasswordMD5, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set or overwrite the password credential of the user

**Parameters**

+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [in]    | hUser          | Handle to the user                                                                                                 |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [in]    | pbyPasswordMD5 | Pointer to MD5 hash of the password                                                                                |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen       | Pointer to password MD5 hash length. If it is too short, needed length is returned if error code is ERR_BUFFERSIZE |
+---------+----------------+--------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------+----------------------------------------------------------------+
| ERR_OK         | Password could be set                                          |
+----------------+----------------------------------------------------------------+
| ERR_PARAMETER  | Invalid user handle or piMaxLen = NULL                         |
+----------------+----------------------------------------------------------------+
| ERR_BUFFERSIZE | If password is too short. Needed length is returned inpiMaxLen |
+----------------+----------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga9bad26c173acb05c79cd7fa80b05b14b:

RTS_RESULT UserDBSetProperty (RTS_HANDLE hUser, RTS_UI32 ulProperty)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set properties of a user

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------+
| [in]    | hUser       | Handle to the user                                                          |
+---------+-------------+-----------------------------------------------------------------------------+
| [in]    | pulProperty | Pointer to set the properties. For details see category "UserDB properties" |
+---------+-------------+-----------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------------------------------+
| ERR_OK        | Properties could be set                        |
+---------------+------------------------------------------------+
| ERR_PARAMETER | Invalid user handle or property pointer = NULL |
+---------------+------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gad945d309b83a82294517242a8e7f3557:

RTS_HANDLE UserDBGetFirst (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first configured user

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+----------------------+
| ERR_OK        | First user available |
+---------------+----------------------+
| ERR_NO_OBJECT | No user configured   |
+---------------+----------------------+

**Returns:**

Handle to the first user or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gac0d58351305afe299d1c6eea2533ca8b:

RTS_HANDLE UserDBGetNext (RTS_HANDLE hPrevUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next configured user. Must be started with :ref:`UserDBGetFirst() <group___cmp_user_mgr_dep_1gabd93d58a1d4c9888017dde577fbcc601>`

**Parameters**

+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevUser | Handle to the previous user retrieved via :ref:`UserDBGetFirst() <group___cmp_user_mgr_dep_1gabd93d58a1d4c9888017dde577fbcc601>` or subsequent calls of :ref:`UserDBGetNext() <group___cmp_user_mgr_dep_1ga1525726f4b481ddea82858d95eb6afd0>` |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult   | Pointer to error code                                                                                                                                                                                                                         |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------+
| ERR_OK        | Next user available    |
+---------------+------------------------+
| ERR_NO_OBJECT | No next user available |
+---------------+------------------------+

**Returns:**

Handle to the next user or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gaa78bb481b3f3548dd2ffe5f91becf683:

RTS_HANDLE UserDBOpen (char *pszUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open user specified by its name

**Parameters**

+---------+---------+-----------------------+
| [in]    | pszUser | User name             |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | User could be opened                                           |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. pszUser = NULL or empty                     |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the user or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gae62c1d3f39df8506c441ae6a3106eb40:

RTS_RESULT UserDBClose (RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close a user

**Parameters**

+---------+-------+--------------------+
| [in]    | hUser | Handle to the user |
+---------+-------+--------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------+
| ERR_OK        | User could be closed |
+---------------+----------------------+
| ERR_PARAMETER | Invalid user handle  |
+---------------+----------------------+

.. _group___cmp_user_d_b_itf_1ga621695714b63963d6f28a43ee598cfec:

RTS_RESULT UserDBGetName (RTS_HANDLE hUser, char *pszUser, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get user name

**Parameters**

+---------+----------+--------------------------------------------------------------------------------------------------------------------+
| [in]    | hUser    | Handle to the user                                                                                                 |
+---------+----------+--------------------------------------------------------------------------------------------------------------------+
| [out]   | pszUser  | Pointer to get user name                                                                                           |
+---------+----------+--------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen | Pointer to length of buffer in pszUser. If pszUser = NULL, only the length of the user name is returned inpiMaxLen |
+---------+----------+--------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------------------+
| ERR_OK        | User name is returned                                     |
+---------------+-----------------------------------------------------------+
| ERR_PARAMETER | Invalid user handle or pszUser = NULL and piMaxLen = NULL |
+---------------+-----------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga47236fcee7c6865e762d7f70a54a6ac7:

RTS_RESULT UserDBGetProperty (RTS_HANDLE hUser, RTS_UI32 *pulProperty)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get properties of a user

**Parameters**

+---------+-------------+--------------------------------------------------------------------------------+
| [in]    | hUser       | Handle to the user                                                             |
+---------+-------------+--------------------------------------------------------------------------------+
| [out]   | pulProperty | Pointer to return the properties. For details see category "UserDB properties" |
+---------+-------------+--------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------------------------------+
| ERR_OK        | Properties could be retrieved                  |
+---------------+------------------------------------------------+
| ERR_PARAMETER | Invalid user handle or property pointer = NULL |
+---------------+------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga97c12727fe2bc03b857aed0749c67ea7:

RTS_RESULT UserDBCheckPassword (RTS_HANDLE hUser, char *pszPassword)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check user credentials (authentication)

**Parameters**

+---------+-------------+----------------------------------+
| [in]    | hUser       | Handle to the user               |
+---------+-------------+----------------------------------+
| [in]    | pszPassword | Pointer to password in cleartext |
+---------+-------------+----------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------------------------------------------------------------+
| ERR_OK        | Password credential matched!                                                  |
+---------------+-------------------------------------------------------------------------------+
| ERR_PARAMETER | Invalid user handle or password = NULL so password credential does not match! |
+---------------+-------------------------------------------------------------------------------+
| ERR_FAILED    | Password credential does not match!                                           |
+---------------+-------------------------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gaae875907da955eb486c104c6df2a5a8b:

RTS_HANDLE UserDBGetFirstGroup (RTS_HANDLE hUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first group to which the user is assigned

**Parameters**

+---------+---------+-----------------------+
| [in]    | hUser   | Handle to the user    |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+----------------------------+
| ERR_OK        | First user group available |
+---------------+----------------------------+
| ERR_PARAMETER | Invalid user handle        |
+---------------+----------------------------+
| ERR_NO_OBJECT | No user group configured   |
+---------------+----------------------------+

**Returns:**

Handle to the first user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga7e9cd0425a047f653badde2dd1500db4:

RTS_HANDLE UserDBGetNextGroup (RTS_HANDLE hUser, RTS_HANDLE hPrevGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next configured user group to which the user is assigned. Must be started with :ref:`UserDBGetFirstGroup() <group___cmp_user_mgr_dep_1ga99ae9d172a67a4614339425fd21da4b1>`

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hUser      | Handle to the user                                                                                                                                                                                                                                            |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevGroup | Handle to the previous user group retrieved via :ref:`UserDBGetFirstGroup() <group___cmp_user_mgr_dep_1ga99ae9d172a67a4614339425fd21da4b1>` or subsequent calls of :ref:`UserDBGetNextGroup() <group___cmp_user_mgr_dep_1gad13447fb022bf0577a00de39a8e2909a>` |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                                                                                                                                                                         |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------+
| ERR_OK        | Next user group available    |
+---------------+------------------------------+
| ERR_NO_OBJECT | No next user group available |
+---------------+------------------------------+

**Returns:**

Handle to the next user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga310c3ae23d02c9ea8d072c2bb27fca34:

RTS_HANDLE UserDBGroupAdd (char *pszGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new user group to the user database

**Parameters**

+---------+----------+-----------------------+
| [in]    | pszGroup | Group name            |
+---------+----------+-----------------------+
| [out]   | pResult  | Pointer to error code |
+---------+----------+-----------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Group could be added                                           |
+--------------------+----------------------------------------------------------------+
| ERR_DUPLICATE      | Group already exists                                           |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. pszGroup = NULL or empty                    |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | No memory available to store new group                         |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the added group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga53eb2ead2c70472e1aaedb46519fa899:

RTS_RESULT UserDBGroupRemove (RTS_HANDLE hGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove user group from the user database

**Parameters**

+---------+--------+---------------------+
| [in]    | hGroup | Handle to the group |
+---------+--------+---------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------+
| ERR_OK        | Group could be removed |
+---------------+------------------------+
| ERR_PARAMETER | Invalid group handle   |
+---------------+------------------------+

.. _group___cmp_user_d_b_itf_1ga592f6109f59dd2334bdea684bbed611e:

RTS_RESULT UserDBGroupAddUser (RTS_HANDLE hGroup, RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new user to a group

**Parameters**

+---------+--------+---------------------+
| [in]    | hGroup | Handle to the group |
+---------+--------+---------------------+
| [in]    | hUser  | Handle to the user  |
+---------+--------+---------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | User could be added or is already added                        |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. hGroup or hUser invalid                     |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | No memory available to add user to group                       |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gab2fafe4f1859e282428a8bd923f24c81:

RTS_RESULT UserDBGroupRemoveUser (RTS_HANDLE hGroup, RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a user from a group

**Parameters**

+---------+--------+---------------------+
| [in]    | hGroup | Handle to the group |
+---------+--------+---------------------+
| [in]    | hUser  | Handle to the user  |
+---------+--------+---------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | User could be removed                                          |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. hGroup or hUser invalid                     |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga71b472bc0cd6c9b6b85160aa05860454:

RTS_RESULT UserDBGroupSetProperty (RTS_HANDLE hGroup, RTS_UI32 ulProperty)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set properties of a group

**Parameters**

+---------+-------------+-----------------------------------------------------------------------------+
| [in]    | hGroup      | Handle to the group                                                         |
+---------+-------------+-----------------------------------------------------------------------------+
| [in]    | pulProperty | Pointer to set the properties. For details see category "UserDB properties" |
+---------+-------------+-----------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------+
| ERR_OK        | Properties could be set                       |
+---------------+-----------------------------------------------+
| ERR_PARAMETER | Invalid user group or property pointer = NULL |
+---------------+-----------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga20afb4d486b5e13ed81c0ab99dd4a7a0:

RTS_RESULT UserDBGroupAddMember (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a group as a member to another group. So that group is derived from the first one

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------+
| [in]    | hGroup       | First group to derive from                                                           |
+---------+--------------+--------------------------------------------------------------------------------------+
| [in]    | hGroupMember | New member group which is derived from the first group (hGroup) after this operation |
+---------+--------------+--------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Group could be added                                           |
+--------------------+----------------------------------------------------------------+
| ERR_DUPLICATE      | Group is already added                                         |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. hGroup or hGroupMember invalid              |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | No memory available to add group to another group              |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gaf5075c4df9d39a576bf3a295f3098fe5:

RTS_RESULT UserDBGroupRemoveMember (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a group as a member from another group. So the group is no longer derived from the first one

**Parameters**

+---------+--------------+--------------------------------------------------------------------------------------------+
| [in]    | hGroup       | First group to remove the derived group from                                               |
+---------+--------------+--------------------------------------------------------------------------------------------+
| [in]    | hGroupMember | Member group which is no longer derived from the first group (hGroup) after this operation |
+---------+--------------+--------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Group could be removed                                         |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. hGroup or hGroupMember invalid              |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gadf2c07b5c0a8633f1d19631c674f31c7:

RTS_HANDLE UserDBGroupGetFirst (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first configured user group

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+----------------------------+
| ERR_OK        | First user group available |
+---------------+----------------------------+
| ERR_NO_OBJECT | No user group configured   |
+---------------+----------------------------+

**Returns:**

Handle to the first user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga330560f782f1357476d13600beec6dfe:

RTS_HANDLE UserDBGroupGetNext (RTS_HANDLE hPrevGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next configured user group. Must be started with :ref:`UserDBGroupGetFirst() <group___cmp_user_mgr_dep_1ga4f850cd22f8e7b2544252a1ab5d7b894>`

**Parameters**

+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevGroup | Handle to the previous user group retrieved via :ref:`UserDBGroupGetFirst() <group___cmp_user_mgr_dep_1ga4f850cd22f8e7b2544252a1ab5d7b894>` or subsequent calls of :ref:`UserDBGroupGetNext() <group___cmp_user_mgr_dep_1gaf5970b32e28da98077d1675b722a0752>` |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                                                                                                                                                                         |
+---------+------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------------+
| ERR_OK        | Next user group available    |
+---------------+------------------------------+
| ERR_NO_OBJECT | No next user group available |
+---------------+------------------------------+

**Returns:**

Handle to the next user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gaadc1b6e4555a5bdbc95a57e90793ce67:

RTS_HANDLE UserDBGroupOpen (char *pszGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open user group specified by its name

**Parameters**

+---------+----------+-----------------------+
| [in]    | pszGroup | User group name       |
+---------+----------+-----------------------+
| [out]   | pResult  | Pointer to error code |
+---------+----------+-----------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | User group could be opened                                     |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. pszGroup = NULL or empty                    |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga2bd36eb02e92b555783cb80dcddc03cd:

RTS_RESULT UserDBGroupClose (RTS_HANDLE hGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close a user group

**Parameters**

+---------+--------+--------------------------+
| [in]    | hGroup | Handle to the user group |
+---------+--------+--------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------+
| ERR_OK        | User group could be closed |
+---------------+----------------------------+
| ERR_PARAMETER | Invalid user group handle  |
+---------------+----------------------------+

.. _group___cmp_user_d_b_itf_1gaa369c57d9fbd1bb2e377b4a827559819:

RTS_RESULT UserDBGroupGetName (RTS_HANDLE hGroup, char *pszGroup, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get user group name

**Parameters**

+---------+----------+----------------------------------------------------------------------------------------------------------------------------+
| [in]    | hGroup   | Handle to the user group                                                                                                   |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------+
| [out]   | pszGroup | Pointer to get user group name                                                                                             |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen | Pointer to length of buffer in pszGroup. If pszGroup = NULL, only the length of the user group name is returned inpiMaxLen |
+---------+----------+----------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------------------------------------------------+
| ERR_OK        | User group name is returned                                      |
+---------------+------------------------------------------------------------------+
| ERR_PARAMETER | Invalid user group handle or pszGroup = NULL and piMaxLen = NULL |
+---------------+------------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga1fbd5d0a7d55623bbd65d073b31e3668:

RTS_RESULT UserDBGroupGetProperty (RTS_HANDLE hGroup, RTS_UI32 *pulProperty)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get properties of a group

**Parameters**

+---------+-------------+--------------------------------------------------------------------------------+
| [in]    | hGroup      | Handle to the group                                                            |
+---------+-------------+--------------------------------------------------------------------------------+
| [out]   | pulProperty | Pointer to return the properties. For details see category "UserDB properties" |
+---------+-------------+--------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------+
| ERR_OK        | Properties could be retrieved                 |
+---------------+-----------------------------------------------+
| ERR_PARAMETER | Invalid user group or property pointer = NULL |
+---------------+-----------------------------------------------+

.. _group___cmp_user_d_b_itf_1gaf35118fab9a262b7b12e3d14e8c7dcea:

RTS_RESULT UserDBGroupHasUser (RTS_HANDLE hGroup, RTS_HANDLE hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if the user is a member of the group

**Parameters**

+---------+--------+--------------------------+
| [in]    | hGroup | Handle to the user group |
+---------+--------+--------------------------+
| [in]    | hUser  | Handle to the user       |
+---------+--------+--------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------+
| ERR_OK        | User is a member of the group                 |
+---------------+-----------------------------------------------+
| ERR_PARAMETER | Invalid user or user group handle             |
+---------------+-----------------------------------------------+
| ERR_FAILED    | User is no member of the specified user group |
+---------------+-----------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga8a833a1d5bdff8bb593a331a70da690b:

RTS_HANDLE UserDBGroupGetFirstUser (RTS_HANDLE hGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first user of the user group

**Parameters**

+---------+---------+--------------------------+
| [in]    | hGroup  | Handle to the user group |
+---------+---------+--------------------------+
| [out]   | pResult | Pointer to error code    |
+---------+---------+--------------------------+

**Return values**

+---------------+--------------------------------------+
| ERR_OK        | First user in the group available    |
+---------------+--------------------------------------+
| ERR_NO_OBJECT | No user configured in the user group |
+---------------+--------------------------------------+

**Returns:**

Handle to the first user in the user group or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gabea7ead32f191a299f9e9ff9dee71c3f:

RTS_HANDLE UserDBGroupGetNextUser (RTS_HANDLE hGroup, RTS_HANDLE hPrevUser, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next configured user of the user group. Must be started with :ref:`UserDBGroupGetFirstUser() <group___cmp_user_mgr_dep_1ga435a64aae8d56149af74cc5bc8809502>`

**Parameters**

+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hGroup    | Handle to the user group                                                                                                                                                                                                                                        |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevUser | Handle to the previous user retrieved via :ref:`UserDBGroupGetFirstUser() <group___cmp_user_mgr_dep_1ga435a64aae8d56149af74cc5bc8809502>` or subsequent calls of :ref:`UserDBGroupGetNextUser() <group___cmp_user_mgr_dep_1gab7f3ebcd85d6072c1ec44ea249c0e6d8>` |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult   | Pointer to error code                                                                                                                                                                                                                                           |
+---------+-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+------------------------+
| ERR_OK        | Next user available    |
+---------------+------------------------+
| ERR_PARAMETER | Invalid handles        |
+---------------+------------------------+
| ERR_NO_OBJECT | No next user available |
+---------------+------------------------+

**Returns:**

Handle to the next user or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga9f4db2b4c2e026cfb3b40ca067a2b074:

RTS_RESULT UserDBGroupHasMember (RTS_HANDLE hGroup, RTS_HANDLE hGroupMember)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check if a user group is a member of the first specified group

**Parameters**

+---------+--------------+---------------------------------------------------------------+
| [in]    | hGroup       | Handle to the first user group                                |
+---------+--------------+---------------------------------------------------------------+
| [in]    | hGroupMember | Handle to the user group to check if it is a member of hGroup |
+---------+--------------+---------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------------+
| ERR_OK        | User group is a member of the first group           |
+---------------+-----------------------------------------------------+
| ERR_PARAMETER | Invalid user group handles                          |
+---------------+-----------------------------------------------------+
| ERR_FAILED    | User group is no member of the specified user group |
+---------------+-----------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga14c27328dcfd923c2fd0848f3ab7e6d2:

RTS_HANDLE UserDBGroupGetFirstMember (RTS_HANDLE hGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first user group as member of the specified group

**Parameters**

+---------+---------+--------------------------+
| [in]    | hGroup  | Handle to the user group |
+---------+---------+--------------------------+
| [out]   | pResult | Pointer to error code    |
+---------+---------+--------------------------+

**Return values**

+---------------+-----------------------------------+
| ERR_OK        | First user group member available |
+---------------+-----------------------------------+
| ERR_PARAMETER | Invalid user group handle         |
+---------------+-----------------------------------+
| ERR_NO_OBJECT | No user group configured          |
+---------------+-----------------------------------+

**Returns:**

Handle to the first user group member or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga524e5d7e9db408eb950fbc5488f631ea:

RTS_HANDLE UserDBGroupGetNextMember (RTS_HANDLE hGroup, RTS_HANDLE hPrevGroupMember, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next configured user group as member of the specified group. Must be started with :ref:`UserDBGroupGetFirstMember() <group___cmp_user_mgr_dep_1gaf028190479e1934b6eeff9d258438ae3>`

**Parameters**

+---------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hGroup           | Handle to the user group                                                                                                                                                                                                                                                  |
+---------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevGroupMember | Handle to the previous user group retrieved via :ref:`UserDBGroupGetFirstMember() <group___cmp_user_mgr_dep_1gaf028190479e1934b6eeff9d258438ae3>` or subsequent calls of :ref:`UserDBGroupGetNextMember() <group___cmp_user_mgr_dep_1ga7553df8f16edfd109e3fad1d931644a8>` |
+---------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                                                                                                     |
+---------+------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------------------+
| ERR_OK        | Next user group member available    |
+---------------+-------------------------------------+
| ERR_NO_OBJECT | No next user group member available |
+---------------+-------------------------------------+

**Returns:**

Handle to the next user group member or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga91659e835b42994966300d8a637fc943:

RTS_RESULT UserDBRightsLoad (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Load the user rights database into memory
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------+
| ERR_OK             | Succeeded                                          |
+--------------------+----------------------------------------------------+
| ERR_FAILED         | Error loading user rights database                 |
+--------------------+----------------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDBRights is fix |
+--------------------+----------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gaa13562c7d0c1225e9ba823e286b5fc7b:

RTS_RESULT UserDBRightsStore (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Storing the current user rights management into permanent database file
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------+
| ERR_OK             | Succeeded                                          |
+--------------------+----------------------------------------------------+
| ERR_FAILED         | Error storing user rights database                 |
+--------------------+----------------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDBRights is fix |
+--------------------+----------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga740be94d09e4909676c67fb93bf5074d:

RTS_RESULT UserDBRightsRelease (void)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Release user rights management in memory. NOTE: The database file is not removed!
**Returns:**

Error code

**Return values**

+--------------------+----------------------------------------------------+
| ERR_OK             | Succeeded                                          |
+--------------------+----------------------------------------------------+
| ERR_FAILED         | Failed releasing user rights management            |
+--------------------+----------------------------------------------------+
| ERR_NOTIMPLEMENTED | Is not implemented perhaps the UserDBRights is fix |
+--------------------+----------------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga025ba4f0a6be7ae9f5b6a72c4d95e568:

RTS_HANDLE UserDBObjectAdd (char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new object to the object management, so the access rights can be configured on that object. NOTE: The name of the object must include the full namespace with "Device" as the root node, e.g. "Device.MyObject" or if it's a filesystem object with "/" as the root node.

**Parameters**

+---------+-----------+------------------------------------+
| [in]    | pszObject | Full object name (see object tree) |
+---------+-----------+------------------------------------+
| [out]   | pResult   | Pointer to error code              |
+---------+-----------+------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Object could be added                                          |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Object invalid = NULL or empty                                 |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | If memory could not be allocated to store this object          |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it could not be added

.. _group___cmp_user_d_b_itf_1ga751556c319d0eff1462ffc4c96604e4b:

RTS_RESULT UserDBObjectRemove (RTS_HANDLE hObject)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove an object from the object management and all its children

**Parameters**

+---------+---------+------------------+
| [in]    | hObject | Handle to object |
+---------+---------+------------------+

**Returns:**

Error code

**Return values**

+---------------+-------------------------+
| ERR_OK        | Object could be removed |
+---------------+-------------------------+
| ERR_PARAMETER | Invalid object handle   |
+---------------+-------------------------+

.. _group___cmp_user_d_b_itf_1gab0373c8bc403ae7ed2c0b41a0d1bbb39:

RTS_HANDLE UserDBObjectAddChild (RTS_HANDLE hFatherObject, char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a new object under a father object specified by its name to the object management, so the access rights can be configured on that object.

**Parameters**

+---------+---------------+-------------------------------------------------------------------+
| [in]    | hFatherObject | Handle to the father object, under which the object will be added |
+---------+---------------+-------------------------------------------------------------------+
| [in]    | pszObject     | Object name (see object tree)                                     |
+---------+---------------+-------------------------------------------------------------------+
| [out]   | pResult       | Pointer to error code                                             |
+---------+---------------+-------------------------------------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Object could be added                                          |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Object invalid = NULL or empty                                 |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+
| ERR_NOMEMORY       | If memory could not be allocated to store this object          |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if it could not be added

.. _group___cmp_user_d_b_itf_1ga1dbda78722d85e821ef0060cddec27d0:

RTS_RESULT UserDBObjectGetID (RTS_HANDLE hObject, RTS_UI32 *pulID)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a unique identifier of an object

**Parameters**

+---------+---------+-----------------------------+
| [in]    | hObject | Handle to object            |
+---------+---------+-----------------------------+
| [out]   | pulID   | Pointer to get the ObjectID |
+---------+---------+-----------------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------+
| ERR_OK        | ObjectID could be retrieved |
+---------------+-----------------------------+
| ERR_PARAMETER | Invalid object handle       |
+---------------+-----------------------------+

.. _group___cmp_user_d_b_itf_1gae4ff4b101ef8701b294d929dfa8c8858:

RTS_RESULT UserDBObjectSetID (RTS_HANDLE hObject, RTS_UI32 ulID)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set a unique identifier of an object

**Parameters**

+---------+---------+------------------+
| [in]    | hObject | Handle to object |
+---------+---------+------------------+
| [in]    | ulID    | ObjectID to set  |
+---------+---------+------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------+
| ERR_OK        | ObjectID could be set |
+---------------+-----------------------+
| ERR_PARAMETER | Invalid object handle |
+---------------+-----------------------+

.. _group___cmp_user_d_b_itf_1gaa24efd478320759dfbe0e59c29add239:

RTS_RESULT UserDBObjectAddGroup (RTS_HANDLE hObject, RTS_HANDLE hGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a group to the specified object to manage access rights

**Parameters**

+---------+---------+---------------------------------------------+
| [in]    | hObject | Handle to object                            |
+---------+---------+---------------------------------------------+
| [in]    | hGroup  | Handle to the group that should be attached |
+---------+---------+---------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------------------------+
| ERR_OK        | Group could be added or is already added |
+---------------+------------------------------------------+
| ERR_PARAMETER | Invalid handles                          |
+---------------+------------------------------------------+
| ERR_NOMEMORY  | No memory to add group                   |
+---------------+------------------------------------------+

.. _group___cmp_user_d_b_itf_1ga3d0cf387e9da96a8e6e5034cb1ec16d1:

RTS_RESULT UserDBObjectRemoveGroup (RTS_HANDLE hObject, RTS_HANDLE hGroup)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Remove a group from the specified object

**Parameters**

+---------+---------+--------------------------------------------+
| [in]    | hObject | Handle to object                           |
+---------+---------+--------------------------------------------+
| [in]    | hGroup  | Handle to the group that should be removed |
+---------+---------+--------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------+
| ERR_OK        | Group could be removed |
+---------------+------------------------+
| ERR_PARAMETER | Invalid handles        |
+---------------+------------------------+

.. _group___cmp_user_d_b_itf_1ga6a983d1a6cdfef28d9ac51972594bfb9:

RTS_RESULT UserDBObjectSetGroupRights (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 ulRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the access rights for the group at the specified object

**Parameters**

+---------+---------+---------------------+
| [in]    | hObject | Handle to object    |
+---------+---------+---------------------+
| [in]    | hGroup  | Handle to the group |
+---------+---------+---------------------+

**Returns:**

Error code

**Return values**

+---------------+-----------------------------------------------------------------------------+
| ERR_OK        | Access rights could be set                                                  |
+---------------+-----------------------------------------------------------------------------+
| ERR_PARAMETER | Invalid handles Rights of the group. See category "User rights" for details |
+---------------+-----------------------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gaecb1dbb879b61ac84fb86f57600bb8a3:

RTS_RESULT UserDBObjectSetGroupDeniedRights (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 ulDeniedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Set the denied access rights for the group at the specified object

**Parameters**

+---------+---------+---------------------+
| [in]    | hObject | Handle to object    |
+---------+---------+---------------------+
| [in]    | hGroup  | Handle to the group |
+---------+---------+---------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------------------------------------------------------------------+
| ERR_OK        | Access rights could be set                                                         |
+---------------+------------------------------------------------------------------------------------+
| ERR_PARAMETER | Invalid handles Denied rights of the group. See category "User rights" for details |
+---------------+------------------------------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gae39441a005c39247db62d7945e555b73:

RTS_HANDLE UserDBObjectGetFirst (RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first object of the user rights management

**Parameters**

+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+------------------------------------------------------+
| ERR_OK        | First object of the user rights management available |
+---------------+------------------------------------------------------+
| ERR_NO_OBJECT | No object available                                  |
+---------------+------------------------------------------------------+

**Returns:**

Handle to the first object in the user rights management or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga065389c35d380fc9138cd73fc4fe2eaf:

RTS_HANDLE UserDBObjectGetNext (RTS_HANDLE hPrevObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next object of the user rights management. Must be started with :ref:`UserDBObjectGetFirst() <group___cmp_user_mgr_dep_1gad9ba90307442de5aa260a8404e49e033>`

**Parameters**

+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevObject | Handle to the previous object retrieved via :ref:`UserDBObjectGetFirst() <group___cmp_user_mgr_dep_1gad9ba90307442de5aa260a8404e49e033>` or subsequent calls of :ref:`UserDBObjectGetNext() <group___cmp_user_mgr_dep_1gae711cd8c362ea4ad68097c5b61ea58d5>` |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult     | Pointer to error code                                                                                                                                                                                                                                       |
+---------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+--------------------------+
| ERR_OK        | Next object available    |
+---------------+--------------------------+
| ERR_PARAMETER | Invalid handles          |
+---------------+--------------------------+
| ERR_NO_OBJECT | No next object available |
+---------------+--------------------------+

**Returns:**

Handle to the next object in the user rights management or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga0f34c95214c7f0ed119ae205761337f4:

RTS_HANDLE UserDBObjectOpen (char *pszObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open object specified by its name

**Parameters**

+---------+-----------+------------------------------------+
| [in]    | pszObject | Full object name (see object tree) |
+---------+-----------+------------------------------------+
| [out]   | pResult   | Pointer to error code              |
+---------+-----------+------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Object could be opened                                         |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter. pszObject = NULL or empty                   |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the object or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga2d8673c3a52d6aaa18839944c73b0de4:

RTS_RESULT UserDBObjectClose (RTS_HANDLE hObject)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Close an object

**Parameters**

+---------+---------+----------------------+
| [in]    | hObject | Handle to the object |
+---------+---------+----------------------+

**Returns:**

Error code

**Return values**

+---------------+------------------------+
| ERR_OK        | Object could be closed |
+---------------+------------------------+
| ERR_PARAMETER | Invalid object handle  |
+---------------+------------------------+

.. _group___cmp_user_d_b_itf_1ga3fd83d0d757af18b83c9434cce474e4b:

RTS_RESULT UserDBObjectGetName (RTS_HANDLE hObject, char *pszObject, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get object name

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [in]    | hObject   | Handle to the object                                                                                                     |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [out]   | pszObject | Pointer to get object name                                                                                               |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen  | Pointer to length of buffer in pszObject. If pszObject = NULL, only the length of the object name is returned inpiMaxLen |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------------------+
| ERR_OK        | Object name is returned                                       |
+---------------+---------------------------------------------------------------+
| ERR_PARAMETER | Invalid object handle or pszObject = NULL and piMaxLen = NULL |
+---------------+---------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gad42743065d3803b1c91de99ad29258e4:

RTS_RESULT UserDBObjectGetPath (RTS_HANDLE hObject, char *pszObject, int *piMaxLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the complete object path name

**Parameters**

+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [in]    | hObject   | Handle to the object                                                                                                     |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [in]    | pszObject | Full object path name (see object tree)                                                                                  |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+
| [inout] | piMaxLen  | Pointer to length of buffer in pszObject. If pszObject = NULL, only the length of the object name is returned inpiMaxLen |
+---------+-----------+--------------------------------------------------------------------------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+---------------------------------------------------------------+
| ERR_OK        | Object name is returned                                       |
+---------------+---------------------------------------------------------------+
| ERR_PARAMETER | Invalid object handle or pszObject = NULL and piMaxLen = NULL |
+---------------+---------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gafac4ff5ab210265b7ea71ff375502d3c:

RTS_HANDLE UserDBObjectGetFirstChild (RTS_HANDLE hFatherObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get first child object in object tree of the specified father object

**Parameters**

+---------+---------------+-----------------------------+
| [in]    | hFatherObject | Handle to the father object |
+---------+---------------+-----------------------------+
| [out]   | pResult       | Pointer to error code       |
+---------+---------------+-----------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | First child object available                                   |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter hFatherObject                                |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the child object or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga3f6ca2689ac544ecbc6bb1a684ff7ee3:

RTS_HANDLE UserDBObjectGetNextChild (RTS_HANDLE hFatherObject, RTS_HANDLE hPrevChildObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get next child object in object tree of the specified father object. Must be started with :ref:`UserDBObjectGetFirstChild() <group___cmp_user_mgr_dep_1gae0a213bc649559b4900535bef06dd774>`

**Parameters**

+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hFatherObject    | Handle to the father object                                                                                                                                                                                                                                                |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevChildObject | Handle to the previous child object retrieved by :ref:`UserDBObjectGetFirstChild() <group___cmp_user_mgr_dep_1gae0a213bc649559b4900535bef06dd774>` or subsequent calls of :ref:`UserDBObjectGetNextChild() <group___cmp_user_mgr_dep_1ga7a88edfb064b6773b9f273f116759384>` |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult          | Pointer to error code                                                                                                                                                                                                                                                      |
+---------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Next child object available                                    |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter hFatherObject or hPrevChildObject            |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the next child object or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1gac253d2a61d4b16f9a1a47c88ac586968:

RTS_HANDLE UserDBObjectGetFather (RTS_HANDLE hChildObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the father object in object tree of the specified child object

**Parameters**

+---------+--------------+----------------------------+
| [in]    | hChildObject | Handle to the child object |
+---------+--------------+----------------------------+
| [out]   | pResult      | Pointer to error code      |
+---------+--------------+----------------------------+

**Return values**

+--------------------+----------------------------------------------------------------+
| ERR_OK             | Father object could be retrieved                               |
+--------------------+----------------------------------------------------------------+
| ERR_PARAMETER      | Invalid parameter hChildObject                                 |
+--------------------+----------------------------------------------------------------+
| ERR_NOTINITIALIZED | The user management is not initialized or it is not loaded yet |
+--------------------+----------------------------------------------------------------+

**Returns:**

Handle to the father/parent object or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga27b9d715209def8ddfab274b981e3b9c:

RTS_HANDLE UserDBObjectGetFirstGroup (RTS_HANDLE hObject, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get the first group in the user rights management of the specified object

**Parameters**

+---------+---------+-----------------------+
| [in]    | hObject | Handle to the object  |
+---------+---------+-----------------------+
| [out]   | pResult | Pointer to error code |
+---------+---------+-----------------------+

**Return values**

+---------------+-----------------------+
| ERR_OK        | First group available |
+---------------+-----------------------+
| ERR_NO_OBJECT | No group available    |
+---------------+-----------------------+

**Returns:**

Handle to the first group of the object in the user rights management or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga26e2651eef1f837177d13cbccfdfc0bc:

RTS_HANDLE UserDBObjectGetNextGroup (RTS_HANDLE hObject, RTS_HANDLE hPrevGroup, RTS_RESULT *pResult)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iteration interface to get next group in the user rights management of the specified object. Must be started with :ref:`UserDBObjectGetFirstGroup() <group___cmp_user_mgr_dep_1ga84f248344eead5363bda00f10e65cb22>`

**Parameters**

+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hObject    | Handle to the object                                                                                                                                                                                                                                                 |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [in]    | hPrevGroup | Handle to the previous group retrieved via :ref:`UserDBObjectGetFirstGroup() <group___cmp_user_mgr_dep_1ga84f248344eead5363bda00f10e65cb22>` or subsequent calls of :ref:`UserDBObjectGetNextGroup() <group___cmp_user_mgr_dep_1ga7689a3bf70af1949eff206675710530c>` |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [out]   | pResult    | Pointer to error code                                                                                                                                                                                                                                                |
+---------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

**Return values**

+---------------+-------------------------+
| ERR_OK        | Next group available    |
+---------------+-------------------------+
| ERR_PARAMETER | Invalid handles         |
+---------------+-------------------------+
| ERR_NO_OBJECT | No next group available |
+---------------+-------------------------+

**Returns:**

Handle to the next group of the object in the user rights management or RTS_INVALID_HANDLE if failed

.. _group___cmp_user_d_b_itf_1ga75bfbb56951f552114f2a061f3543bdf:

RTS_RESULT UserDBObjectGetGroupRights (RTS_HANDLE hObject, RTS_HANDLE hGroup, RTS_UI32 *pulRights, RTS_UI32 *pulDeniedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the rights and the denied rights of a group on a specified object

**Parameters**

+---------+---------+-------------------------------------------------------+
| [in]    | hObject | Handle to object                                      |
+---------+---------+-------------------------------------------------------+
| [in]    | hGroup  | Handle to the group which access rights are requested |
+---------+---------+-------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------+
| ERR_OK        | Access rights could be retrieved |
+---------------+----------------------------------+
| ERR_PARAMETER | Invalid handles                  |
+---------------+----------------------------------+

.. _group___cmp_user_d_b_itf_1ga471e4ecc020e4148efa17830ed104767:

RTS_RESULT UserDBObjectHasRights (char *pszObject, RTS_HANDLE hUser, RTS_UI32 ulRequestedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Check access rights of a user on an object (authorization)

**Parameters**

+---------+-----------+----------------------------------------------------+
| [in]    | pszObject | Full object name (see object tree)                 |
+---------+-----------+----------------------------------------------------+
| [in]    | hUser     | Handle to the user which access rights are checked |
+---------+-----------+----------------------------------------------------+

**Returns:**

Error code

**Return values**

+----------------------+------------------------------------------------------------+
| ERR_OK               | Access permitted                                           |
+----------------------+------------------------------------------------------------+
| ERR_PARAMETER        | Access rights could not be retrieved, so no access rights! |
+----------------------+------------------------------------------------------------+
| ERR_NO_ACCESS_RIGHTS | No access rights!                                          |
+----------------------+------------------------------------------------------------+

.. _group___cmp_user_d_b_itf_1gabd2e62a5fa07a430754f7be16cec3fef:

RTS_RESULT UserDBObjectGetRights (char *pszObject, RTS_HANDLE hUser, RTS_UI32 *pulRights, RTS_UI32 *pulDeniedRights)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the rights and the denied rights of a user on a specified object

**Parameters**

+---------+-----------+------------------------------------------------------+
| [in]    | pszObject | Full object name (see object tree)                   |
+---------+-----------+------------------------------------------------------+
| [in]    | hUser     | Handle to the user which access rights are requested |
+---------+-----------+------------------------------------------------------+

**Returns:**

Error code

**Return values**

+---------------+----------------------------------+
| ERR_OK        | Access rights could be retrieved |
+---------------+----------------------------------+
| ERR_PARAMETER | Invalid handles                  |
+---------------+----------------------------------+

.. last line of group.rst template
.. last line of composition.rst template


